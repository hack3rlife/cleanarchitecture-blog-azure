<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogWebApi.WebApi</name>
    </assembly>
    <members>
        <member name="T:BlogWebApi.WebApi.Controllers.BlogsController">
            <summary>
            Manages Blog CRUD Actions
            </summary>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.BlogsController.#ctor(BlogWebApi.Application.Interfaces.IBlogService)">
            <summary>
            
            </summary>
            <param name="blogService"></param>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.BlogsController.Get(System.Int32,System.Int32)">
            <summary>
            Gets a list of blogs in a paginated fashion
            </summary>
            <response code="200">Returns a list of existing blogs</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.BlogsController.Get(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets a single blog details
            </summary>
            <response code="200">When a valid <see cref="T:System.Guid"/> value is passed, the related Blog details will be returned.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <response code="404">When the provided <see cref="T:System.Guid"/> does not exist or is not related any <see cref="T:BlogWebApi.Domain.Blog"/> in the database.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.BlogsController.Add(BlogWebApi.Application.Dto.BlogAddRequestDto)">
            <summary>
            Adds a new blog
            </summary>
            <param name="blogAddRequestDto"></param>
            <response code="201">When the blog is added successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.BlogsController.Put(BlogWebApi.Application.Dto.BlogUpdateRequestDto)">
            <summary>
            Updates an existing blog
            </summary>
            <param name="blogUpdateRequestDto"></param>
            <response code="204">When the blog is updated successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.BlogsController.Delete(System.Guid)">
            <summary>
            Deletes an existing blog
            </summary>
            <param name="guid"></param>
            <response code="204">When the blog is deleted successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CleanArchitectureController.Get">
            <summary>
            Welcome controller!
            </summary>
            <returns>A<see cref="T:System.String"/> with a welcome message</returns>
        </member>
        <member name="T:BlogWebApi.WebApi.Controllers.CommentsController">
            <summary>
            Manages Comments CRUD Actions
            </summary>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CommentsController.#ctor(BlogWebApi.Application.Interfaces.ICommentService)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="commentService"></param>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CommentsController.Get(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:BlogWebApi.Domain.Comment"/>
            </summary>
            <response code="200">Returns a list of existing comments</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CommentsController.Get(System.Guid)">
            <summary>
            Gets a single comment details
            </summary>
            <param name="commentId">Blog's guid</param>
            <response code="200">When a valid <see cref="T:System.Guid"/> value is passed, the related Blog details will be returned.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <response code="404">When the provided <see cref="T:System.Guid"/> does not exist or is not related any <see cref="T:BlogWebApi.Domain.Comment"/> in the database.</response>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CommentsController.Post(BlogWebApi.Application.Dto.CommentAddRequestDto)">
            <summary>
            Adds a new comment
            </summary>
            <param name="comment"></param>
            <response code="201">When the <see cref="T:BlogWebApi.Domain.Comment"/> is added successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CommentsController.Put(BlogWebApi.Application.Dto.CommentUpdateRequestDto)">
            <summary>
            Updates an existing comment
            </summary>
            <param name="comment"></param>
            <response code="204">When the comment is updated successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.CommentsController.Delete(System.Guid)">
            <summary>
            Deletes an existing comment
            </summary>
            <param name="commentId"></param>
            <response code="204">When the comment is deleted successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="T:BlogWebApi.WebApi.Controllers.PostsController">
            <summary>
            Manages CRUD Actions for Posts
            </summary>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.#ctor(BlogWebApi.Application.Interfaces.IPostService)">
            <summary>
            
            </summary>
            <param name="postService"></param>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.Get(System.Int32,System.Int32)">
            <summary>
            Gets a list of posts
            </summary>
            <response code="200">Returns a list of existing posts</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.Get(System.Guid)">
            <summary>
            Gets a single post details
            </summary>
            <param name="postId"></param>
            <response code="200">When a valid <see cref="T:System.Guid"/> value is passed, the related Blog details will be returned.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <response code="404">When the provided <see cref="T:System.Guid"/> does not exist or is not related any <see cref="T:BlogWebApi.Domain.Blog"/> in the database.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.Get(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets a single post details
            </summary>
            <param name="postId">Blog's guid</param>
            <param name="skip"></param>
            <param name="take"></param>
            <response code="200">When a valid <see cref="T:System.Guid"/> value is passed, the related Blog details will be returned.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <response code="404">When the provided <see cref="T:System.Guid"/> does not exist or is not related any <see cref="T:BlogWebApi.Domain.Blog"/> in the database.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.Post(BlogWebApi.Application.Dto.PostAddRequestDto)">
            <summary>
            Adds a new post
            </summary>
            <param name="post"></param>
            <response code="201">When the post is added successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.Put(BlogWebApi.Application.Dto.PostUpdateRequestDto)">
            <summary>
            Updates an existing post
            </summary>
            <param name="post"></param>
            <response code="204">When the post is updated successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
        <member name="M:BlogWebApi.WebApi.Controllers.PostsController.Delete(System.Guid)">
            <summary>
            Deletes an existing post
            </summary>
            <param name="postId"></param>
            <response code="204">When the post is deleted successfully.</response>
            <response code="400">When there is an error during the execution of the request.</response>
            <returns></returns>
        </member>
    </members>
</doc>
